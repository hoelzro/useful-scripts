#!/usr/bin/env perl

use strict;
use warnings;
use feature qw(say);
use experimental qw(signatures);

use List::Util qw(max);

sub get_clients() {
    my @clients;
    my $current_client;
    my $current_properties_indent;

    open my $pipe, '-|', 'pacmd', 'list-clients';
    while(<$pipe>) {
        chomp;

        if(/^\s*index:\s*(\d+)/) {
            $current_properties_indent = undef;
            $current_client = {
                index => $1,
            };
            push @clients, $current_client;
        } elsif(/^(\s+)properties:/) {
            $current_properties_indent = length($1);
        } elsif(defined($current_properties_indent) && /^(\s*)/ && length($1) <= $current_properties_indent) {
            $current_properties_indent = undef;
        } elsif(defined($current_properties_indent) && $current_client && /^\s*(?<key>\S+)\s*=\s*"(?<value>.*)"/) {
            $current_client->{$+{'key'}} = $+{'value'};
        }
    }
    close $pipe;

    return @clients;
}

sub get_streams() {
    my @streams;
    my $current_stream;
    my $current_properties_indent;

    open my $pipe, '-|', 'pacmd', 'list-sink-inputs';
    while(<$pipe>) {
        chomp;

        if(/^\s*index:\s*(\d+)/) {
            $current_properties_indent = undef;
            $current_stream = {
                index => $1,
            };
            push @streams, $current_stream;
        } elsif(/^\s+state:\s*(.*)/) {
            $current_stream->{'state'} = $1;
        } elsif(/^\s+client:\s*(\d+)/) {
            $current_stream->{'client_id'} = $1;
        } elsif(/^(\s+)properties:/) {
            $current_properties_indent = length($1);
        } elsif(defined($current_properties_indent) && /^(\s*)/ && length($1) <= $current_properties_indent) {
            $current_properties_indent = undef;
        } elsif(defined($current_properties_indent) && $current_stream && /^\s*(?<key>\S+)\s*=\s*"(?<value>.*)"/) {
            $current_stream->{$+{'key'}} = $+{'value'};
        }
    }
    close $pipe;

    return @streams;
}

my @clients = get_clients();
my @spotify_clients = grep { $_->{'application.name'} eq 'Spotify' } @clients;

printf "Found %d Spotify clients\n", scalar(@spotify_clients);

my @streams = get_streams();
my @spotify_streams = grep { $_->{'application.name'} eq 'Spotify' } @streams;

printf "Found %d Spotify streams\n", scalar(@spotify_streams);
my %moribund_clients = map { $_->{'index'} => 1 } @spotify_clients;

my ( $max_stream ) = reverse(sort { $a->{'index'} <=> $b->{'index'} } @spotify_streams);

{
    my $max_stream_client_id = $max_stream->{'client_id'};
    say "Client $max_stream_client_id is reachable via stream $max_stream->{'index'} ($max_stream->{'state'}); skipping";
    delete $moribund_clients{$max_stream_client_id};
}

{
    my $max_client_id = max(map { $_->{'index'} => 1 } @spotify_clients);
    say "Client $max_client_id may not be directly reachable, but may end up getting re-used; skipping";
    delete $moribund_clients{$max_client_id};
}

for my $client_id (sort(keys(%moribund_clients))) {
    say "Killing client $client_id";
    system 'pacmd', 'kill-client', $client_id;
}
