#!/usr/bin/env python

from datetime import datetime
import itertools
import sys

from dateutil.parser import parse as parse_date
import boto3

def list_log_groups(logs):
    groups = logs.describe_log_groups()
    assert len(groups['logGroups']) < 50, "I wasn't programmed to handle too many log groups!"
    for group in groups['logGroups']:
        print(group['logGroupName'])

def dump_logs(logs, log_group, start_time, end_time):
    start_time = int(parse_date(start_time).timestamp() * 1000)
    end_time = int(parse_date(end_time).timestamp() * 1000)

    events = itertools.chain.from_iterable(page['events'] for page in logs.get_paginator('filter_log_events').paginate(
        logGroupName=log_group,
        startTime=start_time,
        endTime=end_time))

    for event in events:
        event_date = datetime.fromtimestamp(event['timestamp'] // 1000).strftime('%F %T')
        event_message = event['message'].strip()
        print(f'{event_date} {event_message}')

logs = boto3.client('logs')

if len(sys.argv) == 1:
    list_log_groups(logs)
elif len(sys.argv) == 4:
    dump_logs(logs, *sys.argv[1:])
else:
    print('''
usage: dump-cw-logs # list log groups
     : dump-cw-logs [log group] [start date] [end date] # dump log entries
    ''')
