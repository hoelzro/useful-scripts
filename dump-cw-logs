#!/usr/bin/env python

from datetime import datetime
import itertools
import json
import sys

from dateutil.parser import parse as parse_date
import boto3

def list_log_groups(logs):
    groups = logs.describe_log_groups()
    assert len(groups['logGroups']) < 50, "I wasn't programmed to handle too many log groups!"
    for group in groups['logGroups']:
        print(group['logGroupName'])

def dump_logs(logs, log_group, start_time, end_time):
    start_time = int(parse_date(start_time).timestamp() * 1000)
    end_time = int(parse_date(end_time).timestamp() * 1000)

    is_first_line = True

    events = itertools.chain.from_iterable(page['events'] for page in logs.get_paginator('filter_log_events').paginate(
        logGroupName=log_group,
        startTime=start_time,
        endTime=end_time))

    for event in events:
        event_date = datetime.fromtimestamp(event['timestamp'] // 1000).strftime('%F %T')
        event_message = event['message'].strip()

        try:
            doc = json.loads(event_message)
            match doc:
                case {'type': 'platform.initStart', 'record': {'runtimeVersion': runtime_version, 'runtimeVersionArn': runtime_version_arn}}:
                    event_message = f'INIT_START Runtime Version: {runtime_version} Runtime Version ARN: {runtime_version_arn}'
                case {'type': 'platform.start', 'record': {'requestId': request_id, 'version': version}}:
                    event_message = f'START RequestId: {request_id} Version: {version}'
                case {'type': 'platform.report', 'record': {'requestId': request_id, 'metrics':{'durationMs': duration_ms, 'billedDurationMs': billed_duration_ms, 'memorySizeMB': memory_size_mb, 'maxMemoryUsedMB': max_memory_used_mb}}}:
                    event_message = f'REPORT RequestId: {request_id} Duration: {duration_ms} ms Billed Duration: {billed_duration_ms} ms Memory Size: {memory_size_mb} MB Max Memory Used: {max_memory_used_mb} MB'
                    if init_duration_ms := doc['record']['metrics'].get('initDurationMs', None):
                        event_message += f' Init Duration: {init_duration_ms} ms'
                case {'type': event_type}:
                    raise NotImplementedError(f'Unable to handle event type {event_type!r}')
                case {'message': message}:
                    event_message = message
                case _:
                    raise NotImplementedError('Unable to handle event')
        except json.JSONDecodeError:
            pass

        if not is_first_line and event_message.startswith('INIT_START '):
            print('')
        is_first_line = False
        print(f'{event_date} {event_message}')

logs = boto3.client('logs')

if len(sys.argv) == 1:
    list_log_groups(logs)
elif len(sys.argv) == 4:
    dump_logs(logs, *sys.argv[1:])
else:
    print('''
usage: dump-cw-logs # list log groups
     : dump-cw-logs [log group] [start date] [end date] # dump log entries
    ''')
