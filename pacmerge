#!/usr/bin/env python

import os
import pathlib
import re
import subprocess
import sys
import urllib.parse

def main(pacnew_file):
    filename = pacnew_file.removesuffix('.pacnew')
    if filename == pacnew_file:
        raise Exception(f"{pacnew_file} doesn't look like a pacnew file")
    if not pathlib.Path(pacnew_file).is_absolute():
        raise Exception(f"{pacnew_file} doesn't look like an absolute path")

    owner = subprocess.check_output(['pacman', '--query', '--owns', filename])
    owner = owner.decode().rstrip()
    if not (m := re.search(r'is owned by (\S+)', owner)):
        raise Exception(f"{owner} didn't match expected pattern")
    owner = m.group(1)

    previous_version = None
    with open('/var/log/pacman.log', 'r') as pacman_log:
        for line in pacman_log:
            if m := re.search(fr'upgraded {re.escape(owner)} \((\S+) -> \S+\)', line):
                previous_version = m.group(1)
    if previous_version is None:
        raise Exception(f'No previous version found for package {owner!r}')

    expected_package_name = urllib.parse.quote(f'{owner}-{previous_version}')

    try:
        package_filename = None
        for package_file in pathlib.Path('/tmp/pacmerge').iterdir():
            if package_file.name.startswith(f'{expected_package_name}-x86_64.pkg.tar.'):
                package_filename = package_file.name
                break
    except FileNotFoundError:
        pass

    if package_filename is None:
        curl = subprocess.Popen(['curl', '-Ls', f'https://archive.archlinux.org/packages/{owner[0]}/{owner}/'], stdout=subprocess.PIPE)
        tidy = subprocess.Popen(['tidy', '--output-xml', 'yes', '--show-warnings', 'no', '--show-info', 'no', '-quiet', '/dev/stdin'], stdin=curl.stdout, stdout=subprocess.PIPE)
        xmllint = subprocess.Popen(['xmllint', '--xpath', f"string(//a[starts-with(@href,'{owner}-{previous_version}-') and substring(@href, string-length(@href) - 3) != '.sig']/@href)", '/dev/stdin'], stdin=tidy.stdout, stdout=subprocess.PIPE)

        package_filename, _ = xmllint.communicate()
        package_filename = package_filename.decode().rstrip()

        curl.wait()
        tidy.wait()
        xmllint.wait()

        if package_filename == '':
            raise Exception(f"Could not find {owner} version {previous_version} on archive.archlinux.org - perhaps it's too old?")

        package_link = f'https://archive.archlinux.org/packages/{owner[0]}/{owner}/{package_filename}'
        try:
            os.mkdir('/tmp/pacmerge')
        except FileExistsError:
            pass

        subprocess.check_call(['curl', '-Lso', f'/tmp/pacmerge/{package_filename}', package_link])

    num_slashes = len([letter for letter in pacnew_file if letter == '/'])
    subprocess.check_call(['tar', '-C', '/tmp/pacmerge/', f'--strip-components={num_slashes - 1}', '--extract', '-f', f'/tmp/pacmerge/{package_filename}', filename.removeprefix('/')])

    sudo_env = os.environ.copy()
    sudo_env['SUDO_EDITOR'] = 'vimdiff'
    subprocess.check_call(['sudoedit', filename, f'/tmp/pacmerge/{pathlib.Path(filename).name}', pacnew_file], env=sudo_env)

if __name__ == '__main__':
    if len(sys.argv) < 2:
        print(f'usage: {sys.argv[0]} [filename]', file=sys.stderr)
        sys.exit(1)
    main(*sys.argv[1:])
