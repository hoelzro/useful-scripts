#!/usr/bin/env python

from datetime import datetime, timedelta
import re
import sys

from dateutil import tz

# xorg-server uses GetTimeInMillis() for timestamp logging, which (depending on compilation options),
# returns the time since boot in milliseconds as a 32-bit value, which the logger then divides by
# 1,000 to get the value in seconds.  This means that it rolls every 4.3 million seconds or so - so
# compensate for that
MAX_TIMESTAMP_SECONDS = (1 << 32) / 1_000

dst_aware_tz = tz.gettz()

filename = '/var/log/Xorg.0.log' if len(sys.argv) == 1 else sys.argv[1]

with open('/proc/stat', 'r') as f:
    start_time = None
    for line in f:
        if m := re.match(r'^btime\s+(\d+)', line):
            start_time = datetime.fromtimestamp(int(m.group(1)), dst_aware_tz)
    assert start_time, 'Unable to extract system boot time from /proc/stat'

with open(filename, 'r') as f:
    previous_timestamp = 0
    timestamp_roll_offset = 0

    for line in f:
        if m := re.match(r'^\[\s*(\d+[.]\d+)\]', line):
            timestamp = float(m.group(1))
            if timestamp < previous_timestamp:
                timestamp_roll_offset += MAX_TIMESTAMP_SECONDS
            previous_timestamp = timestamp

        line = re.sub(r'^\[(.*?)\]', lambda m: f'[{(start_time + timedelta(seconds=timestamp_roll_offset + float(m.group(1)))).astimezone(dst_aware_tz)}]', line)
        print(line, end='')
